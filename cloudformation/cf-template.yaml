AWSTemplateFormatVersion: 2010-09-09

Description: Tech Challenge



Parameters:
  MyName:
    Type: String
    Description: Name of the Candidate


Resources:
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Challenge_${MyName}
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
      KeySchema:
        - AttributeName: team
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import json
          import boto3

          def dynamo_itemcreate(team_name, team_country, team_desc, team_rating, team_type):
              dynamodb = boto3.client('dynamodb')
              db_name = '${DynamoTable}'
              dynamodb.put_item(TableName=db_name, Item={'country':{'S':team_country}, 'team':{'S':team_name}, 'desc':{'S':team_desc}, 'rating':{'S':team_rating}, 'type':{'S':team_type}})

          def lambda_handler(event, context):
              print('Team Country: %s' % event['team_country'])
              print('Team Name: %s' % event['team_name'])
              print('Team Description: %s' % event['team_desc'])
              print('Team Rating: %s' % event['team_rating'])
              print('Team Type: %s' % event['team_type'])
              dynamo_itemcreate(event['team_name'], event['team_country'], event['team_desc'],event['team_rating'], event['team_type'])
      Description: API Gateway TechChallenge
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole' # write access to CloudWatch log
      - !Ref DynamoDBWritePolicy # write access to Dynamo DB


  DynamoDBWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Provide write access to Dynamo DB
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource: !GetAtt DynamoTable.Arn


  APIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName:
        'Fn::GetAtt':
          - LambdaFunction
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: ApiRestApi
            - /*


  ApiRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub RestTechChallenge1_${MyName}
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt
        - ApiRestApi
        - RootResourceId
      RestApiId: !Ref ApiRestApi
      PathPart: 'teams'

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiRestApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref RestApiAuthorizer
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{}'
            ResponseParameters:
              method.response.header.Location: integration.response.body.headers.uid
            StatusCode: '201'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "team_name": $input.json(''team_name''), "team_country": $input.json(''team_country''), "team_desc": $input.json(''team_desc''), "team_rating": $input.json(''team_rating''), "team_type": $input.json(''team_type'')}'
      RequestModels:
        application/json: !Ref ApiModel
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Location: true
          StatusCode: '201'

  ApiModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: Team
      RestApiId: !Ref ApiRestApi
      Schema:
        title: Team
        type: object
        properties:
          team_country:
            type: string
          team_name:
            type: string
          team_desc:
            type: string
          team_rating:
            type: string
          team_type:
            type: string

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiRestApi
      StageName: v1
    DependsOn:
      - ApiMethod
      - ApiModel
      - APIPermission

  TokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: token
          AttributeType: S
      KeySchema:
        - AttributeName: token
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: auth-token

  AuthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: '1'
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - :table/auth-token

  AuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var dynamodb = new AWS.DynamoDB();

          function generatePolicy(principalId, effect, resource) {
              return {
                  'principalId': principalId,
                  'policyDocument': {
                      'Version': '2012-10-17',
                      'Statement': [{
                          'Action': 'execute-api:Invoke',
                          'Effect': effect,
                          'Resource': resource
                      }]
                  }
              };
          }

          exports.handler = function (event, context, cb) {
              var token = event.authorizationToken;
              dynamodb.getItem({
                  "Key": {
                      "token": { "S": token }
                  },
                  "TableName": "auth-token"
              }, function (err, data) {
                  if (err) {
                      cb(err);
                  } else {
                      if (data.Item === undefined) {
                          cb(null, generatePolicy('user', 'Deny', event.methodArn));
                      } else {
                          cb(null, generatePolicy('user', 'Allow', event.methodArn));
                      }
                  }
              });
          };

      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt 'AuthLambdaRole.Arn'
      Runtime: nodejs8.10
      Timeout: 60

  RestApiAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource: !GetAtt 'AuthLambda.Arn'

  RestApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt 'RestApiAuthorizerRole.Arn'
      AuthorizerResultTtlInSeconds: 300
      AuthorizerUri: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - :lambda:path/2015-03-31/functions/
          - !GetAtt 'AuthLambda.Arn'
          - /invocations
      IdentitySource: method.request.header.Authorization
      IdentityValidationExpression: ^[a-zA-Z0-9]{3,32}$
      Name: api-authorizer
      RestApiId: !Ref ApiRestApi
      Type: TOKEN

Outputs:
  BaseURL:
    Description: Base URL
    Value: !Sub 'https://${ApiRestApi}.execute-api.${AWS::Region}.amazonaws.com'
  ApiURL:
    Description: API Invoke URL
    Value: !Sub 'https://${ApiRestApi}.execute-api.${AWS::Region}.amazonaws.com/v1/teams'
